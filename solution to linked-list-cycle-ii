// Time Complexity : worst case is O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// detect for cycle using 2 pointers fast and slow. if they ever intersect, itt means that there is a cycle in the list. when they intersect, move fast to the beginning and move both at the same time.
// the point of their intersection will be the point of cycle.

public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null) {
            return null;
        }
        ListNode slow = head;
        ListNode fast = head;
        boolean hasCycle = false;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) {
                hasCycle = true;
                break;
            }
        }
        if(hasCycle) {
            fast = head;
            while(fast != slow) {
                slow = slow.next;
                fast = fast.next;
            }
            return fast;
        } else {
            return null;
        }
    }
}
